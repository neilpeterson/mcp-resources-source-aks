apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceAccount.name }}
  annotations:
    azure.workload.identity/client-id: {{ .Values.identity.clientId }}
    azure.workload.identity/tenant-id: {{ .Values.identity.tenantId }}
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.secretProvider.name }}
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: {{ .Values.identity.clientId }}
    keyvaultName: {{ .Values.keyvault.name }}
    objects: |
      array:
        - |
          objectName: {{ .Values.keyvault.secretName }}
          objectType: secret
    tenantId: {{ .Values.identity.tenantId }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app: {{ .Values.app.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        azure.workload.identity/use: "true"
    spec:
      volumes:
      - name: cert-volume
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.secretProvider.name }}
      containers:
      - name: {{ .Values.app.name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.targetPort }}
        env:
        {{- range .Values.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        volumeMounts:
        - name: cert-volume
          mountPath: "/mnt/secrets-store"
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: {{ .Values.serviceAccount.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
spec:
  selector:
    app: {{ .Values.app.name }}
  ports:
    - name: http
      protocol: TCP
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
  type: {{ .Values.service.type }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.ingress.name }}
  annotations:
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: {{ .Values.ingress.certificate }}
    appgw.ingress.kubernetes.io/backend-protocol: https
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/backend-hostname: {{ .Values.ingress.hostname }}
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/request-timeout: "120"
    appgw.ingress.kubernetes.io/backend-path-prefix: "/"
spec:
  ingressClassName: azure-application-gateway
  rules:
  - http:
      paths:
      - backend:
          service:
            name: {{ .Values.service.name }}
            port:
              number: {{ .Values.service.port }}
        path: {{ .Values.ingress.path }}
        pathType: Prefix
